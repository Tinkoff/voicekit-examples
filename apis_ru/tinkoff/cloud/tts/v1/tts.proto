syntax = "proto3";

package tinkoff.cloud.tts.v1;
option go_package = "github.com/Tinkoff/voicekit-examples/golang/pkg/tinkoff/cloud/tts/v1";
option objc_class_prefix = 'TVKSS';

import "google/api/annotations.proto";

service TextToSpeech { // Синтез речи.
  rpc ListVoices(ListVoicesRequest) returns (ListVoicesResponses) { // Метод для получения списка доступных голосов.
    option (google.api.http) = {
      get: "/v1/tts:list_voices"
    };
  }
  rpc Synthesize(SynthesizeSpeechRequest) returns (SynthesizeSpeechResponse) { // Метод для синтеза аудио.
    option (google.api.http) = {
      post: "/v1/tts:synthesize"
      body: "*"
    };
  }
  rpc StreamingSynthesize(SynthesizeSpeechRequest) returns (stream StreamingSynthesizeSpeechResponse); // Метод для потокового синтеза.
}

enum AudioEncoding { // Формат кодирования аудио. Задаёт и контейнер, и кодек.
  ENCODING_UNSPECIFIED = 0; // <i>Недопустимое значение.</i>
  LINEAR16 = 1; // PCM без заголовков с целыми знаковыми 16-битными семплами в линейном распределении.
  reserved "FLAC"; reserved 2;
  reserved "MULAW"; reserved 3;
  reserved "AMR"; reserved 4;
  reserved "AMR_WB"; reserved 5;
  reserved "OGG_OPUS"; reserved 6;
  reserved "SPEEX_WITH_HEADER_BYTE"; reserved 7;
  ALAW = 8; // PCM без заголовков с 8-битными семплами в распределении A-law (aka PCMA).
  reserved "LINEAR32F"; reserved 9;
  reserved "OGG_VORBIS"; reserved 10;
  RAW_OPUS = 11; // Фреймы Opus, запакованные в сообщения Protobuf.<br/><b>ВАЖНО</b>: каждый фрейм Opus запакован в отдельное сообщение с полем `audio_content`.<br/>Т. е. нельзя просто так взять и сконкатенировать фреймы Opus и отправить их одним куском в декодер Opus.<br/>Кроме того, несмотря на то, что Opus не привязан к частоте дискретизации на стадии кодирования, предполагаемая длительность синтезируемого аудио возвращается в семплах указанной частоты дискретизации.<br/>Не поддерживается для непотокового метода `Synthesize`.
  reserved "MPEG_AUDIO"; reserved 12;
}

message Voice { // Описание голоса при получении списка доступных голосов.
  reserved "language_codes"; reserved 1;
  string name = 2; // Название голоса.
  reserved "ssml_gender"; reserved 3;
  reserved "natural_sample_rate_hertz"; reserved 4;
}

message ListVoicesRequest { // Запрос списка голосов.
  reserved "language_code"; reserved 1;
}

message ListVoicesResponses { // Ответ со списком голосов.
  repeated Voice voices = 1; // Список голосов.
}

message SynthesisInput { // Входные данные для синтеза.
  string text = 1; // Сырой текст для синтеза.
  string ssml = 2; // SSML для синтеза.
}

message VoiceSelectionParams { // Конфигурация предпочитаемого голоса для синтеза.
  reserved "language_code"; reserved 1;
  string name = 2; // Явно заданное имя голоса.
  reserved "ssml_gender"; reserved 3;
}

message AudioConfig { // Конфигурация аудио на выходе
  AudioEncoding audio_encoding = 1; // Формат кодирования аудио. Задаёт и контейнер, и кодек. Обязательный параметр, должен быть задан явно.
  float speaking_rate = 2; // Скорость произношения. Задаётся в долях от естественной скорости произношения для конкретного голоса. Например, значение '0.5' - замедляет речь в два раза, '2' - ускоряет речь в 2 раза. Поддерживаются значения от 0.33 до 3. Значение по умолчанию - 1.0
  float pitch = 3; // Высота речи. Задаётся в долях от естественной высоты конкретного голоса. Например, значение '0.5' - понижает высоту голоса в 2 раза, '2' - повышает высоту голоса в 2 раза. Поддерживаются значения от 0.33 до 3. Значение по умолчанию - 1.0
  reserved "volume_gain_db"; reserved 4;
  int32 sample_rate_hertz = 5; // Частота дискретизации аудио на выходе в герцах. Обязательный параметр, должен быть задан явно. Поддерживаются частоты от 1000&nbsp;Гц до 48000&nbsp;Гц включительно.
}

message SynthesizeSpeechRequest { // Запрос к методам `Synthesize` и `StreamingSynthesize`.
  SynthesisInput input = 1; // Входящие данные для синтеза.
  VoiceSelectionParams voice = 2; // Параметры выбора голоса.
  AudioConfig audio_config = 3; // Конфигурация аудио. Обязательный параметр, должен быть задан явно.
}

message SynthesizeSpeechResponse { // Ответ в методе `Synthesize`.
  bytes audio_content = 1; // Аудио содержимое целиком.
}

message StreamingSynthesizeSpeechResponse { // Фрагмент синтезированного аудио в методе `StreamingSynthesize`. См. `AudioEncoding = RAW_OPUS` для подробностей по работе с кодеком Opus.
  bytes audio_chunk = 1; // Аудио содержимое: либо семплы в случае с `LINEAR16`, либо одиночный фрейм в случае `RAW_OPUS`.
}
