// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tinkoff/cloud/stt/v1/stt.proto

package v1

import (
	context "context"
	v1 "github.com/Tinkoff/voicekit-examples/golang/pkg/tinkoff/cloud/longrunning/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeechToTextClient is the client API for SpeechToText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextClient interface {
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_StreamingRecognizeClient, error)
	LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type speechToTextClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextClient(cc grpc.ClientConnInterface) SpeechToTextClient {
	return &speechToTextClient{cc}
}

func (c *speechToTextClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, "/tinkoff.cloud.stt.v1.SpeechToText/Recognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechToTextClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToText_ServiceDesc.Streams[0], "/tinkoff.cloud.stt.v1.SpeechToText/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextStreamingRecognizeClient{stream}
	return x, nil
}

type SpeechToText_StreamingRecognizeClient interface {
	Send(*StreamingRecognizeRequest) error
	Recv() (*StreamingRecognizeResponse, error)
	grpc.ClientStream
}

type speechToTextStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *speechToTextStreamingRecognizeClient) Send(m *StreamingRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextStreamingRecognizeClient) Recv() (*StreamingRecognizeResponse, error) {
	m := new(StreamingRecognizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechToTextClient) LongRunningRecognize(ctx context.Context, in *LongRunningRecognizeRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, "/tinkoff.cloud.stt.v1.SpeechToText/LongRunningRecognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechToTextServer is the server API for SpeechToText service.
// All implementations must embed UnimplementedSpeechToTextServer
// for forward compatibility
type SpeechToTextServer interface {
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	StreamingRecognize(SpeechToText_StreamingRecognizeServer) error
	LongRunningRecognize(context.Context, *LongRunningRecognizeRequest) (*v1.Operation, error)
	mustEmbedUnimplementedSpeechToTextServer()
}

// UnimplementedSpeechToTextServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechToTextServer struct {
}

func (UnimplementedSpeechToTextServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedSpeechToTextServer) StreamingRecognize(SpeechToText_StreamingRecognizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedSpeechToTextServer) LongRunningRecognize(context.Context, *LongRunningRecognizeRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LongRunningRecognize not implemented")
}
func (UnimplementedSpeechToTextServer) mustEmbedUnimplementedSpeechToTextServer() {}

// UnsafeSpeechToTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServer will
// result in compilation errors.
type UnsafeSpeechToTextServer interface {
	mustEmbedUnimplementedSpeechToTextServer()
}

func RegisterSpeechToTextServer(s grpc.ServiceRegistrar, srv SpeechToTextServer) {
	s.RegisterService(&SpeechToText_ServiceDesc, srv)
}

func _SpeechToText_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechToTextServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinkoff.cloud.stt.v1.SpeechToText/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechToTextServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechToText_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServer).StreamingRecognize(&speechToTextStreamingRecognizeServer{stream})
}

type SpeechToText_StreamingRecognizeServer interface {
	Send(*StreamingRecognizeResponse) error
	Recv() (*StreamingRecognizeRequest, error)
	grpc.ServerStream
}

type speechToTextStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *speechToTextStreamingRecognizeServer) Send(m *StreamingRecognizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextStreamingRecognizeServer) Recv() (*StreamingRecognizeRequest, error) {
	m := new(StreamingRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SpeechToText_LongRunningRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongRunningRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechToTextServer).LongRunningRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinkoff.cloud.stt.v1.SpeechToText/LongRunningRecognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechToTextServer).LongRunningRecognize(ctx, req.(*LongRunningRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeechToText_ServiceDesc is the grpc.ServiceDesc for SpeechToText service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechToText_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.cloud.stt.v1.SpeechToText",
	HandlerType: (*SpeechToTextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _SpeechToText_Recognize_Handler,
		},
		{
			MethodName: "LongRunningRecognize",
			Handler:    _SpeechToText_LongRunningRecognize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _SpeechToText_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tinkoff/cloud/stt/v1/stt.proto",
}
