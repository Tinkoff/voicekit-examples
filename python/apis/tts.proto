syntax = "proto3";

package tinkoff.cloud.tts.v1;

import "google/api/annotations.proto";


service TextToSpeech {
    rpc ListVoices(ListVoicesRequest) returns (ListVoicesResponses) {
        option (google.api.http) = {
            get: "/v1/tts:list_voices"
        };
    }
    rpc Synthesize(SynthesizeSpeechRequest) returns (SynthesizeSpeechResponse) {
        option (google.api.http) = {
            post: "/v1/tts:synthesize"
            body: "*"
        };
    }
    rpc StreamingSynthesize(SynthesizeSpeechRequest) returns (stream StreamingSynthesizeSpeechResponse);
}

enum SsmlVoiceGender {
    SSML_VOICE_GENDER_UNSPECIFIED = 0;
    MALE = 1;
    FEMALE = 2;
    NEUTRAL = 3;
}

message Voice {
    repeated string language_codes = 1;
    string name = 2;
    SsmlVoiceGender ssml_gender = 3;
    int32 natural_sample_rate_hertz = 4;
}

message ListVoicesRequest {
    string language_code = 1;
}

message ListVoicesResponses {
    repeated Voice voices = 1;
}

message SynthesisInput {
    string text = 1;
    reserved "ssml"; reserved 2;
    map<string, string> metadata = 3;
}

message VoiceSelectionParams {
    string language_code = 1;
    string name = 2;
    SsmlVoiceGender ssml_gender = 3;
}

enum AudioEncoding {
  ENCODING_UNSPECIFIED = 0;
  LINEAR16 = 1;
  reserved "FLAC"; reserved 2;
  MULAW = 3;
  reserved "AMR"; reserved 4;
  reserved "AMR_WB"; reserved 5;
  reserved "OGG_OPUS"; reserved 6;
  reserved "SPEEX_WITH_HEADER_BYTE"; reserved 7;
  ALAW = 8;
  LINEAR32F = 9;
  reserved "OGG_VORBIS"; reserved 10;
  RAW_OPUS = 11;
  reserved "MPEG_AUDIO"; reserved 12;
}

message AudioConfig {
    AudioEncoding audio_encoding = 1;
    double speaking_rate = 2;
    reserved "pitch"; reserved 3;
    reserved "volume_gain_db"; reserved 4;
    int32 sample_rate_hertz = 5;
}

message SynthesizeSpeechRequest {
    SynthesisInput input = 1;
    VoiceSelectionParams voice = 2;
    AudioConfig audio_config = 3;
}

message SynthesizeSpeechResponse {
    bytes audio_content = 1;
}

message StreamingSynthesizeSpeechResponse {
    bytes audio_chunk = 1;
}
